which(clean_data$SalmonellaMPNg=="<0.03; <0.03")
n_total <- nrow(clean_data)
n_pos_test <- nrow(clean_data[which(clean_data$SalmonellaSpAnalysis == "Positive"),])
n_pos_test_mpn <- nrow(clean_data[which(clean_data$SalmonellaMPNqual == "Positive"),])
# Drop sal_mpn_tubes NAs for MPN fitting
subset_data <- clean_data[!is.na(clean_data$SalmonellaMPNcombo),]
# new turkey data 2021
N.total = 4945       # overall number of samples tested
N.pos.test = 792     # number of screening-positive (detected) samples. Not all were enumerated.
N.pos.test.mpn = 87 # number of samples positive (detected) at +/- screening test that were also enumerated via MPN
num.tubes = 3        # number of tubes at each dilution
tube3 <- subset_data[which(subset_data$SalmonellaMPNqual == "Positive"),]
tube3<-as.matrix(subset(tube3, select = c("SalmonellaMPNcombo_Tube_1","SalmonellaMPNcombo_Tube_2","SalmonellaMPNcombo_Tube_3","SalmonellaMPNcombo_Tube_4","SalmonellaMPNcombo_Tube_5")))
tube4<-ifelse(is.na(tube3),0,tube3)
colnames(tube4) <- c("V1", "V2","V3","V4","V5")
# Data:  # These are MPN tube scores from the combined "NRTE" and "HC_TU" datasets
v.screen = 325 # screen test volume (ml=g)
poscr     <- rep(1,N.pos.test.mpn) # add column for screening results (here assumed all to be 1, as only screen-positives were enumerated via MPN)
tube4plus <- cbind(poscr,tube4)
screen.results <- c(rep(0,N.total-N.pos.test),rep(1,N.pos.test-N.pos.test.mpn))
{ # Extra bracket needed only for R markdown files
sink("MPN_JAGSmodel_v4.R")
cat("
model{
# PRIORS
# Broad priors of a lognormal describing CFU per gram of product.
# (Note: if using Win/OpenBugs, they use the natural log (ln) scale so also include a transformation to the log base 10 scale).
mu ~ dnorm(-9.4,1.1)
tau ~ dgamma(0.1,0.1)
sigma <- sqrt(1 / tau)
# Loop for the screen-positive tests that were also evaluated by MPN:
for (i in 1:N.pos.test.mpn) {
lambda[i] ~ dlnorm(mu,tau)
p_screen[i] <- 1- exp(-v.screen*lambda[i]) # 325 screening test
p_10[i]     <- 1- exp(-10.0*lambda[i])     # Probabilities for MPN tubes
p_1[i]      <- 1- exp(-1.0*lambda[i])
p_0.1[i]    <- 1- exp(-0.1*lambda[i])
p_0.01[i]   <- 1- exp(-0.01*lambda[i])
p_0.001[i]  <- 1- exp(-0.001*lambda[i])
# Likelihood for the qualitative screening test
tube[i,1] ~ dbin(p_screen[i],1) # Test positive on 325 g screening test
# Likelihoods for the MPN data at each dilution
tube[i,2] ~ dbin(p_10[i],N.tubes)  # with N.tunes=3, the draw is a number btw 0 and 3, included.
tube[i,3] ~ dbin(p_1[i],N.tubes)
tube[i,4] ~ dbin(p_0.1[i],N.tubes)
tube[i,5] ~ dbin(p_0.01[i],N.tubes)
tube[i,6] ~ dbin(p_0.001[i],N.tubes)
}  # end of loop on screen-positive MPN-enumerated samples (i)
# Loop for the screened samples that had no MPN performed
# (both detected and non-detected at +/- screening test):
for (j in (N.pos.test.mpn+1):N.total){
lambda[j] ~ dlnorm(mu,tau)
p_screen[j] <- 1-exp(-v.screen*lambda[j])
screened[j-N.pos.test.mpn] ~ dbin(p_screen[j],1)
}
}  # end of model
", fill = TRUE)
sink()
} # Extra bracket needed only for R markdown files
# Specify data and inits:
data = list(
v.screen = v.screen,
N.tubes = num.tubes,
N.total = N.total,
N.pos.test.mpn = N.pos.test.mpn,
tube = tube4plus,
screened = screen.results
)
inits = list(
list(lambda = rlnorm(N.total,-3.9,0.3),tau = 1.1,.RNG.seed=1,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-3.0,0.1),tau = 1.1,.RNG.seed=2,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-4,0.1),  tau = 1.1,.RNG.seed=3,.RNG.name= 'base::Wichmann-Hill')
)
# Specification for the MCMC sampler in JAGS:
n.adapt   = 1000   # n iteration for adaptation
n.update  = 10000  # n iterations for burn-in
n.iter    = 50000  # n iteration to keep in the final chain
n.thinval = 50     # Thinning constant (50).  (Use n.thinval = 1 when just checking out the model run).
burn.in   = 1000   # 1000
# Call to JAGS:
set.seed(1)
jm_a = jags.model("MPN_JAGSmodel_v4.R", n.adapt = n.adapt, n.chains = 3, inits = inits, data = data)
jm_a = jags.model("MPN_JAGSmodel_v4.R", n.adapt = n.adapt, n.chains = 3, inits = inits, data = data)
#update(jm_a, n.iter = n.update)  # repeat this line if more iteration are needed for convergence
zm1 = coda.samples(jm_a, variable.names = c("mu","tau"), n.iter = n.iter, thin=n.thinval)
(SummaryResults=summary(window(zm1, start = burn.in), quantiles=c(0.025, 0.5, 0.975)))
mu=    c(window(zm1[[1]][,1],start=burn.in),
window(zm1[[2]][,1],start=burn.in),
window(zm1[[3]][,1],start=burn.in))
tau=   c(window(zm1[[1]][,2],start=burn.in),
window(zm1[[2]][,2],start=burn.in),
window(zm1[[3]][,2],start=burn.in))
sigma= sqrt(1/tau)
# Summarizing coda object:
summary(zm1)  # print(zm1)  to visualize the entire output
### Plots and outputs:
summary_stats<-as.data.frame(cbind(stat.desc(mu),stat.desc(sigma)))
names(summary_stats)<-c("mu","sigma")
write.csv(summary_stats,"JAGS_Fit_Summary.csv")
summary_stats
# Plot density functions:
mu<-as.matrix(sort(mu))
K.ecdf<-ecdf(mu)
par(mfrow=c(1,1),mar=c(3,3,2,2), las=1)
plot(density(mu), main="mu")
log_mu<-log10(exp(mu))
plot(density(log_mu), main="mu in log10")
abline(v=mean(log_mu), col="blue", lwd = 2, lty = 2)
mean(log_mu)
mean(log_sigma)
sigma<-as.matrix(sort(sigma))
K.ecdf<-ecdf(sigma)
plot(density(sigma), main="sigma")
log_sigma<-log10(exp(sigma))
plot(density(log_sigma), main="sigma in log10")
mean(log_sigma)
fitted_count_ground(-4.857386, 2.051831)
mu=    c(window(zm1[[1]][,1],start=burn.in),
window(zm1[[2]][,1],start=burn.in),
window(zm1[[3]][,1],start=burn.in))
mu
mean(mu)
log10(exp(mean(mu)))
library(readxl)
library(rjags) # https://mcmc-jags.sourceforge.io/
library(fitdistrplus)
library(stringr)
library(pastecs)
library(knitr)
library(MASS)
# MPN Fit ----
# Uses the Ebel model modified by Kowalcyk
# Important: Returns in LN format! Use log10(exp()) to correct
mpn_fit <- function(mpn_data, n_total, n_pos_test, n_pos_test_mpn, n_tubes, type) {
# MPN ----
N.total <- n_total
N.pos.test <- n_pos_test
N.pos.test.mpn <- n_pos_test_mpn
N.ND <- N.total - N.pos.test
num.tubes <- n_tubes
if (type == "ground") {
v.screen <- 325 # From Kowalcyk Model-turkey
v.mpn <- 1 # From Kowalcyk Model-turkey: Ground model does not use v.mpn, set to 1 so that we don't have to create multiple files
} else if (type == "parts") {
v.screen <- 136.35 # From Kowalcyk Model-chicken
v.mpn <- 45.45 # From Kowalcyk Model-chicken
}
screen.results <- c(
rep(1,N.pos.test.mpn),
rep(1,N.pos.test-N.pos.test.mpn),
rep(0,N.total-N.pos.test)
)
data <- list(
v.screen = v.screen,
v.mpn = v.mpn,
N.tubes = num.tubes,
N.total = N.total,
N.pos.test.mpn = N.pos.test.mpn,
tube = mpn_data,
screened = screen.results
)
inits = list(
list(lambda = rlnorm(N.total,-9,0.02), tau = 0.05, .RNG.seed=1,.RNG.name= 'base::Wichmann-Hill'), # random seed
list(lambda = rlnorm(N.total,-6,0.03), tau = 0.3, .RNG.seed=2,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-2.5,0.01), tau = 0.1, .RNG.seed=3,.RNG.name= 'base::Wichmann-Hill')
)
n.adapt = 5000  # n iteration for adaptation
n.update = 10000  # n iterations to add
n.iter = 5000 # n iteration to keep in the final chain
n.thinval = 10 # Thinning constant (10).  (Use n.thinval = 1 when just checking out the model run).
burn.in = 100
set.seed(1)
if (n_tubes==3) {
model <- jags.model(
"JAGS_MPN_Model.jag",
n.adapt = n.adapt,
n.chains = 3,
inits = inits,
data = data
)
} else if(n_tubes==5) {
model <- jags.model(
"JAGS_MPN_Model_5-Tube.jag",
n.adapt = n.adapt,
n.chains = 3,
inits = inits,
data = data
)
}
suppressWarnings(update(
model,
n.iter = n.update
))
zm1 <- coda.samples(
model,
variable.names = c("mu","tau"),
n.iter = n.iter,
thin = n.thinval
)
(SummaryResults=summary(window(zm1, start = burn.in), quantiles=c(0.025, 0.5, 0.975)))
mu=    c(window(zm1[[1]][,1],start=burn.in),
window(zm1[[2]][,1],start=burn.in),
window(zm1[[3]][,1],start=burn.in))
tau=    c(window(zm1[[1]][,2],start=burn.in),  # change subscript as needed
window(zm1[[2]][,2],start=burn.in),
window(zm1[[3]][,2],start=burn.in))
sigma= sqrt(1/tau)
# Plots and outputs:
summary_stats <- as.data.frame(cbind(pastecs::stat.desc(mu), pastecs::stat.desc(sigma)) )
names(summary_stats) <- c("mu","sigma")
fit <- c(mean(mu), mean(sigma))
return(summary_stats)
}
mean(log_mu)
mean(log_sigma)
fitted_count_ground(-4.857386, 2.051831)
# rh_fit <- qpcr_fit(subset_data, 10^-1.48, 10^0, 10^4, 10^8, "qPCR")
qpcr_fit <- function (input_table, lod, enumeration_lower, enumeration_upper, upper_bound, method, full=TRUE) {
# Create left/right table ----
left_right_table <- data.frame(
matrix(
ncol = 2,
nrow = dim(input_table)[1]
)
)
colnames(left_right_table) <- c('left', 'right')
colnames(input_table) <- c("test","value")
# fill left/right table ----
i <- 1
while (i <= dim(input_table)[1]) {
if (grepl("qPCR", method)) {
x <- input_table$value[i]
} else if (grepl("plate count", method)|grepl("APC", method)) {
x <- input_table$value[i]
}
y <- input_table$test[i]
# TO DO: Zero detection
if (y=="Positive") {
if (grepl(">", x)) { # Has a "<", above enumeration_upper and cannot convert to a "real number" with as.numeric
left_right_table$left[i] <- (enumeration_upper)
left_right_table$right[i] <- (upper_bound)
} else if (grepl("<", x)) { # Has a "<", below enumeration_lower and cannot convert to a "real number" with as.numeric
left_right_table$left[i] <- (lod)
left_right_table$right[i] <- (enumeration_lower)
} else {
x <- as.numeric(x) # Is a "real number" and can be checked with numerical rules
}
if (enumeration_upper<x) { # Above enumeration_upper
left_right_table$left[i] <- (enumeration_upper)
left_right_table$right[i] <- (upper_bound)
} else if ((enumeration_lower)<=x & x<=(enumeration_upper)) { # Between enumeration_lower and enumeration_upper
left_right_table$left[i] <- x/(1814/400)
left_right_table$right[i] <- x/(1814/400)
} else if (x < enumeration_lower) { # Below enumeration_lower
left_right_table$left[i] <- (lod)
left_right_table$right[i] <- (enumeration_lower)
}
} else if (y=="Negative") {
left_right_table$left[i] <- NA
if (full==FALSE) {
left_right_table$right[i] <- NA
} else {
left_right_table$right[i] <- (lod)
}
}
i <- i+1
}
if (full==FALSE) {
left_right_table <- left_right_table[-which(is.na(left_right_table$left) & is.na(left_right_table$right)),]
}
# Log10 ----
i <- 1
while (i <= length(left_right_table$left)) {
## Left ----
if (left_right_table$left[i]!=0 & !is.na(left_right_table$left[i])) {
left_right_table$left[i] <- log10(left_right_table$left[i])
}
# Right ----
if (left_right_table$right[i]!=0 & !is.na(left_right_table$right[i])) {
left_right_table$right[i] <- log10(left_right_table$right[i])
}
i <- i+1
}
# Return ----
fit <- (fitdistrplus::fitdistcens(left_right_table, "norm"))
return(fit)
}
cfu_threshold_cut <- function(cfu, values, types, rounding) {
values <- as.data.frame(values)
colnames(values) <- c("V1")
types <- as.data.frame(types)
colnames(types) <- c("V1")
count <- sum(as.numeric(as.character(values$V1[which(types$V1=="value")]))>as.numeric(cfu), na.rm = TRUE)
percentage <- round(count/length(values$V1)*100, rounding)
paste0(">", MASS::fractions(cfu), " CFU: ", count, " (", percentage, "%)")
}
cfu_threshold_cut_return <- function(cfu, values, types, rounding) {
values <- as.data.frame(values)
colnames(values) <- c("V1")
types <- as.data.frame(types)
colnames(types) <- c("V1")
count <-  sum(as.numeric(as.character(values$V1[which(types$V1=="value")]))>as.numeric(cfu), na.rm = TRUE)
if (!is.na(rounding)) {
percentage <- round(count/length(values$V1)*100, rounding)
} else {
percentage <- count/length(values$V1)*100
}
return(c(count, percentage))
}
fitted_count_parts <- function(mean, sd) {
cat(paste0(">10 CFU (Fit): ", round((1-pnorm(log10(10), mean, sd, TRUE))*100,2), "%\n>1 CFU (Fit): ", round((1-pnorm(log10(1), mean, sd, TRUE))*100,2), "%\n>1/(30*(1814/400)) CFU (Positive) (Fit): ", round((1-pnorm(log10(1/(30*(1814/400))), mean, sd, TRUE))*100,2), "%\n<1/(30*(1814/400) CFU (Negative) (Fit): ", round((pnorm(log10(1/(30*(1814/400))), mean, sd, TRUE))*100,2), "%\n"))
}
fitted_count_ground <- function(mean, sd) {
cat(paste0(">10 CFU (Fit): ", round((1-pnorm(log10(10), mean, sd, TRUE))*100,2), "%\n>1 CFU (Fit): ", round((1-pnorm(log10(1), mean, sd, TRUE))*100,2), "%\n>1/325 CFU (Positive) (Fit): ", round((1-pnorm(log10(1/325), mean, sd, TRUE))*100,2), "%\n<1/325 CFU (Negative) (Fit): ", round((pnorm(log10(1/325), mean, sd, TRUE))*100,2), "%\n"))
}
fitted_count_parts_return <- function(mean, sd, l=c(10,1,1/30)) {
return(c((1-pnorm(log10(l[1]), mean, sd, TRUE))*100, (1-pnorm(log10(l[2]), mean, sd, TRUE))*100, (1-pnorm(log10(l[3]), mean, sd, TRUE))*100, (pnorm(log10(l[3]), mean, sd, TRUE))*100))
}
fitted_count_ground_return <- function(mean, sd) {
return(c((1-pnorm(log10(10), mean, sd, TRUE))*100, (1-pnorm(log10(1), mean, sd, TRUE))*100, (1-pnorm(log10(1/325), mean, sd, TRUE))*100, (pnorm(log10(1/325), mean, sd, TRUE))*100))
}
MPN_Refence <- read.csv("MPN_Lookup.csv")
MPN_Refence_LOD <- MPN_Refence[c(1,40),]
MPN_Refence <- MPN_Refence[-c(1,40),]
MPN_Refence$MPN_Index <- as.double(MPN_Refence$MPN_Index)
fsis_haccp_turkey_2024 <- read.csv(paste0(sub("/Fitting", "", getwd()),"/raw data/FSIS_RAW_Poultry_combined_2024-09-16 (New).csv"))
fsis_haccp_turkey_2024 <- subset(fsis_haccp_turkey_2024, select = c("ProjectCode", "CollectionDate", "SalmonellaSpAnalysis", "SalmonellaSerotype", "SalmonellaQPCRg"))
fsis_haccp_turkey_2024 <- fsis_haccp_turkey_2024[which(fsis_haccp_turkey_2024$ProjectCode=="HC_TU_COM01"),]
fsis_haccp_turkey_2024$CollectionDate <- as.Date.character(fsis_haccp_turkey_2024$CollectionDate, tryFormats = "%m/%d/%Y")
fsis_haccp_turkey_2024 <- fsis_haccp_turkey_2024[which(fsis_haccp_turkey_2024$CollectionDate>="2023-04-05"),]
fsis_haccp_turkey_2024$SalmonellaSpAnalysis <- factor(fsis_haccp_turkey_2024$SalmonellaSpAnalysis)
fsis_haccp_turkey_2024$SalmonellaSerotype[which(fsis_haccp_turkey_2024$SalmonellaSerotype=="NULL")] <- NA
fsis_haccp_turkey_2024$SalmonellaSerotype <- factor(fsis_haccp_turkey_2024$SalmonellaSerotype)
fsis_haccp_turkey_2024$SalmonellaQPCRg[which(fsis_haccp_turkey_2024$SalmonellaQPCRg=="NULL")] <- NA
fsis_haccp_turkey_2024$value_type <- NA
fsis_haccp_turkey_2024$value_type[which(!is.na(fsis_haccp_turkey_2024$SalmonellaQPCRg))] <- "value"
fsis_haccp_turkey_2024$value_type[grepl("<",fsis_haccp_turkey_2024$SalmonellaQPCRg)] <- ("cutoff_left")
fsis_haccp_turkey_2024$value_type[grepl(">",fsis_haccp_turkey_2024$SalmonellaQPCRg)] <- ("cutoff_right")
fsis_haccp_turkey_2024$value_actual <- fsis_haccp_turkey_2024$SalmonellaQPCRg
fsis_haccp_turkey_2024$value_actual <- gsub("<", "", fsis_haccp_turkey_2024$value_actual)
fsis_haccp_turkey_2024$value_actual <- gsub(">", "", fsis_haccp_turkey_2024$value_actual)
fsis_haccp_turkey_2024$value_actual <- as.numeric(fsis_haccp_turkey_2024$value_actual)
subset_data <- subset(fsis_haccp_turkey_2024, select = c("SalmonellaSpAnalysis", "SalmonellaQPCRg"))
subset_data <- subset_data[-which(subset_data$SalmonellaSpAnalysis=="Positive" & is.na(subset_data$SalmonellaQPCRg)),]
fsis_haccp_turkey_2024_fit <- qpcr_fit(subset_data, 1/325, 10^1, 10^7, 10^8, "qPCR") #why we use 1/375, check what others use
fsis_haccp_turkey_2024_fit$estimate[1]
fsis_haccp_turkey_2024_fit$estimate[2]
nrow(fsis_haccp_turkey_2024)
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Negative")])
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive")])
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_actual > 1 & fsis_haccp_turkey_2024$value_type=="value")])
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_actual > 10 & fsis_haccp_turkey_2024$value_type=="value")])
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_type=="cutoff_left")])
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Negative")])/nrow(fsis_haccp_turkey_2024)
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive")])/nrow(fsis_haccp_turkey_2024)
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_actual > 1 & fsis_haccp_turkey_2024$value_type=="value")])/nrow(fsis_haccp_turkey_2024)
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_actual > 10 & fsis_haccp_turkey_2024$value_type=="value")])/nrow(fsis_haccp_turkey_2024)
length(fsis_haccp_turkey_2024$SalmonellaSpAnalysis[which(fsis_haccp_turkey_2024$SalmonellaSpAnalysis=="Positive" & fsis_haccp_turkey_2024$value_type=="cutoff_left")])/nrow(fsis_haccp_turkey_2024)
fitted_count_ground(fsis_haccp_turkey_2024_fit$estimate[1],fsis_haccp_turkey_2024_fit$estimate[2])
mean(log_mu)
fitted_count_ground(-4.857386, 2.051831)
# Print summary statistics of fitted parameters of the lognormal distribution:
print(summary_stats)
mu=    c(window(zm1[[1]][,1],start=burn.in),
window(zm1[[2]][,1],start=burn.in),
window(zm1[[3]][,1],start=burn.in))
### Plots and outputs:
summary_stats<-as.data.frame(cbind(stat.desc(mu),stat.desc(sigma)))
names(summary_stats)<-c("mu","sigma")
### Plots and outputs:
summary_stats<-as.data.frame(cbind(stat.desc(mu),stat.desc(sigma)))
names(summary_stats)<-c("mu","sigma")
summary_stats_log10$mu <- log10(exp(summary_stats$mu))
summary_stats_log10$sigma <- log10(exp(summary_stats$sigma))
### Plots and outputs:
summary_stats<-as.data.frame(cbind(stat.desc(mu),stat.desc(sigma)))
names(summary_stats)<-c("mu","sigma")
summary_stats$mu_log10 <- log10(exp(summary_stats$mu))
summary_stats$sigma_log10 <- log10(exp(summary_stats$sigma))
write.csv(summary_stats,"JAGS_Fit_Summary.csv")
summary_stats
library(readxl)
library(rjags) # https://mcmc-jags.sourceforge.io/
library(fitdistrplus)
library(stringr)
library(pastecs)
library(knitr)
library(MASS)
# MPN Fit ----
# Uses the Ebel model modified by Kowalcyk
# Important: Returns in LN format! Use log10(exp()) to correct
mpn_fit <- function(mpn_data, n_total, n_pos_test, n_pos_test_mpn, n_tubes, type) {
# MPN ----
N.total <- n_total
N.pos.test <- n_pos_test
N.pos.test.mpn <- n_pos_test_mpn
N.ND <- N.total - N.pos.test
num.tubes <- n_tubes
if (type == "ground") {
v.screen <- 325 # From Kowalcyk Model-turkey
v.mpn <- 1 # From Kowalcyk Model-turkey: Ground model does not use v.mpn, set to 1 so that we don't have to create multiple files
} else if (type == "parts") {
v.screen <- 136.35 # From Kowalcyk Model-chicken
v.mpn <- 45.45 # From Kowalcyk Model-chicken
}
screen.results <- c(
rep(1,N.pos.test.mpn),
rep(1,N.pos.test-N.pos.test.mpn),
rep(0,N.total-N.pos.test)
)
data <- list(
v.screen = v.screen,
v.mpn = v.mpn,
N.tubes = num.tubes,
N.total = N.total,
N.pos.test.mpn = N.pos.test.mpn,
tube = mpn_data,
screened = screen.results
)
inits = list(
list(lambda = rlnorm(N.total,-9,0.02), tau = 0.05, .RNG.seed=1,.RNG.name= 'base::Wichmann-Hill'), # random seed
list(lambda = rlnorm(N.total,-6,0.03), tau = 0.3, .RNG.seed=2,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-2.5,0.01), tau = 0.1, .RNG.seed=3,.RNG.name= 'base::Wichmann-Hill')
)
n.adapt = 5000  # n iteration for adaptation
n.update = 10000  # n iterations to add
n.iter = 5000 # n iteration to keep in the final chain
n.thinval = 10 # Thinning constant (10).  (Use n.thinval = 1 when just checking out the model run).
burn.in = 100
set.seed(1)
if (n_tubes==3) {
model <- jags.model(
"JAGS_MPN_Model.jag",
n.adapt = n.adapt,
n.chains = 3,
inits = inits,
data = data
)
} else if(n_tubes==5) {
model <- jags.model(
"JAGS_MPN_Model_5-Tube.jag",
n.adapt = n.adapt,
n.chains = 3,
inits = inits,
data = data
)
}
suppressWarnings(update(
model,
n.iter = n.update
))
zm1 <- coda.samples(
model,
variable.names = c("mu","tau"),
n.iter = n.iter,
thin = n.thinval
)
(SummaryResults=summary(window(zm1, start = burn.in), quantiles=c(0.025, 0.5, 0.975)))
mu=    c(window(zm1[[1]][,1],start=burn.in),
window(zm1[[2]][,1],start=burn.in),
window(zm1[[3]][,1],start=burn.in))
tau=    c(window(zm1[[1]][,2],start=burn.in),  # change subscript as needed
window(zm1[[2]][,2],start=burn.in),
window(zm1[[3]][,2],start=burn.in))
sigma= sqrt(1/tau)
# Plots and outputs:
summary_stats <- as.data.frame(cbind(pastecs::stat.desc(mu), pastecs::stat.desc(sigma)) )
names(summary_stats) <- c("mu","sigma")
fit <- c(mean(mu), mean(sigma))
return(summary_stats)
}
inits = list(
list(lambda = rlnorm(N.total,-3.9,0.3),tau = 1.1,.RNG.seed=1,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-3.0,0.1),tau = 1.1,.RNG.seed=2,.RNG.name= 'base::Wichmann-Hill'),
list(lambda = rlnorm(N.total,-4,0.1),  tau = 1.1,.RNG.seed=3,.RNG.name= 'base::Wichmann-Hill')
)
# Specification for the MCMC sampler in JAGS:
n.adapt   = 1000   # n iteration for adaptation
n.update  = 10000  # n iterations for burn-in
# Summarizing coda object:
summary(zm1)  # print(zm1)  to visualize the entire output
summary(tau)
#plot(zm1)
traceplot(zm1)
# Test for convergence:
heidel.diag(zm1)
### Plots and outputs:
summary_stats<-as.data.frame(cbind(stat.desc(mu),stat.desc(sigma)))
names(summary_stats)<-c("mu","sigma")
summary_stats$mu_log10 <- log10(exp(summary_stats$mu))
summary_stats$sigma_log10 <- log10(exp(summary_stats$sigma))
write.csv(summary_stats,"JAGS_Fit_Summary.csv")
summary_stats
# Plot density functions:
mu<-as.matrix(sort(mu))
K.ecdf<-ecdf(mu)
par(mfrow=c(1,1),mar=c(3,3,2,2), las=1)
plot(density(mu), main="mu")
log_mu<-log10(exp(mu))
abline(v=mean(log_mu), col="blue", lwd = 2, lty = 2)
mean(log_mu)
mean(log_mu)
log_mu<-log10(exp(mu))
plot(density(log_mu), main="mu in log10")
abline(v=mean(log_mu), col="blue", lwd = 2, lty = 2)
mean(log_mu)
sigma<-as.matrix(sort(sigma))
K.ecdf<-ecdf(sigma)
plot(density(sigma), main="sigma")
log_sigma<-log10(exp(sigma))
abline(v=mean(log_sigma), col="red", lwd = 2, lty = 2)
mean(log_sigma)
